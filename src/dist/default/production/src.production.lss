
dist/default/production/src.production.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000009e  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f1  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  00000895  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021e  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f9  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  0000135d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000147d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e9       	ldi	r30, 0x9E	; 158
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 36       	cpi	r26, 0x64	; 100
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	27 c0       	rjmp	.+78     	; 0x9a <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
  4e:	b8 9a       	sbi	0x17, 0	; 23
  
  masklo	=~maskhi&ws2812_PORTREG;
  50:	88 b3       	in	r24, 0x18	; 24
  52:	8e 7f       	andi	r24, 0xFE	; 254
  maskhi |=        ws2812_PORTREG;
  54:	98 b3       	in	r25, 0x18	; 24
  56:	91 60       	ori	r25, 0x01	; 1
  
  sreg_prev=SREG;
  58:	2f b7       	in	r18, 0x3f	; 63
  cli();  
  5a:	f8 94       	cli
  5c:	e0 e6       	ldi	r30, 0x60	; 96
  5e:	f0 e0       	ldi	r31, 0x00	; 0

  while (datlen--) {
  60:	30 e0       	ldi	r19, 0x00	; 0
  62:	e3 36       	cpi	r30, 0x63	; 99
  64:	f3 07       	cpc	r31, r19
  66:	89 f0       	breq	.+34     	; 0x8a <loop46+0x1e>
    curbyte=*data++;
  68:	31 91       	ld	r19, Z+
    
    asm volatile(
  6a:	48 e0       	ldi	r20, 0x08	; 8

0000006c <loop46>:
  6c:	98 bb       	out	0x18, r25	; 24
  6e:	00 00       	nop
  70:	00 c0       	rjmp	.+0      	; 0x72 <loop46+0x6>
  72:	37 ff       	sbrs	r19, 7
  74:	88 bb       	out	0x18, r24	; 24
  76:	33 0f       	add	r19, r19
  78:	00 00       	nop
  7a:	00 c0       	rjmp	.+0      	; 0x7c <loop46+0x10>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <loop46+0x12>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <loop46+0x14>
  80:	88 bb       	out	0x18, r24	; 24
  82:	00 c0       	rjmp	.+0      	; 0x84 <loop46+0x18>
  84:	4a 95       	dec	r20
  86:	91 f7       	brne	.-28     	; 0x6c <loop46>
  88:	eb cf       	rjmp	.-42     	; 0x60 <main+0x12>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
  8a:	2f bf       	out	0x3f, r18	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	87 ec       	ldi	r24, 0xC7	; 199
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <loop46+0x24>
  94:	00 c0       	rjmp	.+0      	; 0x96 <loop46+0x2a>
  96:	00 00       	nop
  98:	ff cf       	rjmp	.-2      	; 0x98 <loop46+0x2c>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
